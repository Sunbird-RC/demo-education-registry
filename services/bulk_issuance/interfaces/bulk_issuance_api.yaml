swagger: '2.0'
info:
  version: 1.0.0
  title: Bulk Issuance
  description: Bulk Issuance API
security:
  - hasRole: []
securityDefinitions:
  hasRole:
    # This scheme uses the header: "Authorization: Bearer {base64 encoded string representing a JWT}"
    # Alternatively, the query param: "access_token" may be used.
    #
    # In our scenario, we must use the query param version in order to avoid
    # passing several headers with key 'Authorization'
    type: oauth2
    # The flow and URLs in spec are for documentary purpose: go-swagger does not implement OAuth workflows
    flow: accessCode
    authorizationUrl: 'https://dummy.oauth.net/auth'
    tokenUrl: 'https://dumy.oauth.net/token'
    # Required scopes are passed by the runtime to the authorizer
    scopes:
      admin: scope of super admin
      facility-admin: scope of facility admin
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1/bulk/sample/{schemaName}:
    get:
      tags:
        - sampleTemplate
      summary: get sample template
      produces:
        - application/octet-stream
        - application/json
      security:
        - hasRole: ["Issuer"]
      parameters:
        - name: schemaName
          in: path
          required: true
          type: string
          description: schema name
      responses:
        '200':
          description: OK
          headers:
            Content-Disposition:
              type: string
          schema:
            $ref: '#/definitions/SampleTemplateResponse'
        '404':
          description: Not found
          schema:
            type: string
  /v1/bulk/uploadedFiles:
    get:
      tags:
        - uploadedFiles
      summary: get uploaded files
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - hasRole: ["Issuer"]
      responses:
        '200':
          description: OK
          schema:
            type: object
        '404':
          description: Not found
          schema:
            type: string
  /v1/uploadFiles/{VCName}:
    post:
      tags:
        - uploadAndCreateRecords
      summary: upload the file and create records
      produces:
        - application/json
      consumes:
        - multipart/form-data
      security: 
        - hasRole: ["Issuer"]
      parameters:
        - in: formData
          name: file
          type: file
          description: Certification data in the form of csv
        - in: path
          name: VCName
          type: string
          required: true
          description: VerifiableCredential you are issuing
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CreateRecordResponse'
        '404':
          description: Not found
          schema:
            type: string
        '500':
          description: Internal Server Error
          schema:
            type: string
  /v1/download/{id}:
    get:
      tags:
        - downloadFileReport
      summary: download the success and error report of file uploaded
      produces:
        - application/json
        - application/octet-stream
      security:
        - hasRole: ["Issuer"]
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: File name
      responses:
        '200':
          description: OK
          headers:
            Content-Disposition:
              type: string
          schema:
            $ref: '#/definitions/FileDownload'
        '404':
          description: Not found
          schema:
            type: string
          

definitions:
  SampleTemplateResponse:
    type: object
  UploadedFiles:
    type: object
  FileDownload:
    type: object
  CreateRecordResponse:
    type: object
  